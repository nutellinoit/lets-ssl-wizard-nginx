server {
    listen              80;
	listen              443 ssl; # 'ssl' parameter tells NGINX to decrypt the traffic
	server_name         HOSTNAME;
    ssl_certificate     /root/.acme.sh/HOSTNAME/fullchain.cer; # The certificate file
    ssl_certificate_key /root/.acme.sh/HOSTNAME/HOSTNAME.key; # The private key file

    return 301 $scheme://www.HOSTNAME$request_uri;
}

server {
	listen 80;
	server_name www.HOSTNAME;
	return 301 https://$host$request_uri;
}

server {
    listen              443 ssl; # 'ssl' parameter tells NGINX to decrypt the traffic
    server_name         www.HOSTNAME;
    ssl_certificate     /root/.acme.sh/HOSTNAME/fullchain.cer; # The certificate file
    ssl_certificate_key /root/.acme.sh/HOSTNAME/HOSTNAME.key; # The private key file


    location / {

	proxy_set_header X-Forwarded-Host $host;
	proxy_set_header X-Forwarded-Server $host;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Proto $scheme;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header Host $host;
        proxy_pass REVERSEURL;
    }
    ##### location '/.well-known/acme-challenge'  {
	#####	default_type "text/plain";
	#####	alias /var/www/html/HOSTNAME/.well-known/acme-challenge/;
	#####	# kill cache
    #####    add_header Last-Modified $date_gmt;
    #####    add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
    #####    if_modified_since off;
    #####    expires off;
    #####    etag off;
	#####}
}
